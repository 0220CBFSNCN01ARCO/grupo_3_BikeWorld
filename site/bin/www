#!/usr/bin/env node

// Module dependencies.
const app = require('../app')
const debug = require('debug')('grupo-3-bikeworld:server')
const http = require('http')

// Normalize a port into a number, string, or false
const normalizePort = val => {
  const port = parseInt(val, 10)
  return isNaN(port) ? val : port >= 0 ? port : false
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

// Create HTTP server
const server = http.createServer(app)

// Listen on provided port, on all network interfaces
server.listen(port)

server.on('error', err => {
  if (err.syscall !== 'listen') {
    throw err
  }

  // handle specific listen errors with friendly messages
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
  switch (err.code) {
    case 'EACCESS':
      console.error(`${bind} requires elevated priviliges`)
      process.exit(1)
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
    default:
      throw err
  }
})

server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `pipe ${addr.port}`
  debug(`Listening on ${bind}`)
})
