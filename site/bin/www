#!/usr/bin/env node

import _debug from 'debug'
import app from '../app'
import { createServer } from 'http'

const debug = _debug('grupo-3-bikeworld:server')

// Normalize a port into a number, string, or false
const normalizePort = val => {
  const port = parseInt(val, 10)
  return isNaN(port) ? val : port >= 0 ? port : false
}

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

// Create HTTP server
const server = createServer(app)

// Listen on provided port, on all network interfaces
server.listen(port)

server.on('error', err => {
  if (err.syscall !== 'listen') {
    throw err
  }

  // handle specific listen errors with friendly messages
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
  switch (err.code) {
  case 'EACCESS':
    console.error(`${bind} requires elevated privileges`)
    process.exit(1)
  // eslint-disable-next-line no-fallthrough
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`)
    process.exit(1)
  // eslint-disable-next-line no-fallthrough
  default:
    throw err
  }
})

server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
  debug(`Listening on ${bind}`)
})
